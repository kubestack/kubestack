#!/usr/bin/env python
"""
ApivbetaApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program.
Do not edit the class manually.
"""

from models import *


class ApivbetaApi(object):

    def __init__(self, apiClient):
        self.apiClient = apiClient
    
    
    def createBinding(self, **kwargs):
        """create a Binding
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Binding:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createBinding" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/bindings'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listEndpoints(self, **kwargs):
        """list objects of kind Endpoints
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_EndpointsList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/endpoints'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_EndpointsList')
        return responseObject
        
    
    def createEndpoints(self, **kwargs):
        """create a Endpoints
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Endpoints:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/endpoints'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readEndpoints(self, **kwargs):
        """read the specified Endpoints
        Args:
            
            name, str: name of the Endpoints (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Endpoints
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/endpoints/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Endpoints')
        return responseObject
        
    
    def replaceEndpoints(self, **kwargs):
        """replace the specified Endpoints
        Args:
            
            name, str: name of the Endpoints (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Endpoints:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/endpoints/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchEndpoints(self, **kwargs):
        """partially update the specified Endpoints
        Args:
            
            name, str: name of the Endpoints (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Endpoints:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/endpoints/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listEvent(self, **kwargs):
        """list objects of kind Event
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_EventList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_EventList')
        return responseObject
        
    
    def createEvent(self, **kwargs):
        """create a Event
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Event:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readEvent(self, **kwargs):
        """read the specified Event
        Args:
            
            name, str: name of the Event (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Event
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Event')
        return responseObject
        
    
    def replaceEvent(self, **kwargs):
        """replace the specified Event
        Args:
            
            name, str: name of the Event (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Event:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteEvent(self, **kwargs):
        """delete a Event
        Args:
            
            name, str: name of the Event (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchEvent(self, **kwargs):
        """partially update the specified Event
        Args:
            
            name, str: name of the Event (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Event:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/events/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listLimitRange(self, **kwargs):
        """list objects of kind LimitRange
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_LimitRangeList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_LimitRangeList')
        return responseObject
        
    
    def createLimitRange(self, **kwargs):
        """create a LimitRange
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_LimitRange:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readLimitRange(self, **kwargs):
        """read the specified LimitRange
        Args:
            
            name, str: name of the LimitRange (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_LimitRange
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_LimitRange')
        return responseObject
        
    
    def replaceLimitRange(self, **kwargs):
        """replace the specified LimitRange
        Args:
            
            name, str: name of the LimitRange (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_LimitRange:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteLimitRange(self, **kwargs):
        """delete a LimitRange
        Args:
            
            name, str: name of the LimitRange (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchLimitRange(self, **kwargs):
        """partially update the specified LimitRange
        Args:
            
            name, str: name of the LimitRange (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_LimitRange:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/limitRanges/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listNode(self, **kwargs):
        """list objects of kind Node
        Args:
            
        
        Returns: V1beta1_MinionList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_MinionList')
        return responseObject
        
    
    def createNode(self, **kwargs):
        """create a Node
        Args:
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readNode(self, **kwargs):
        """read the specified Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: V1beta1_Minion
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Minion')
        return responseObject
        
    
    def replaceNode(self, **kwargs):
        """replace the specified Node
        Args:
            
            name, str: name of the Node (required)
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteNode(self, **kwargs):
        """delete a Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchNode(self, **kwargs):
        """partially update the specified Node
        Args:
            
            name, str: name of the Node (required)
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listNamespace(self, **kwargs):
        """list objects of kind Namespace
        Args:
            
        
        Returns: V1beta1_NamespaceList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_NamespaceList')
        return responseObject
        
    
    def createNamespace(self, **kwargs):
        """create a Namespace
        Args:
            
            body, V1beta1_Namespace:  (required)
            
        
        Returns: void
        """
        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readNamespace(self, **kwargs):
        """read the specified Namespace
        Args:
            
            name, str: name of the Namespace (required)
            
        
        Returns: V1beta1_Namespace
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Namespace')
        return responseObject
        
    
    def replaceNamespace(self, **kwargs):
        """replace the specified Namespace
        Args:
            
            name, str: name of the Namespace (required)
            
            body, V1beta1_Namespace:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteNamespace(self, **kwargs):
        """delete a Namespace
        Args:
            
            name, str: name of the Namespace (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchNamespace(self, **kwargs):
        """partially update the specified Namespace
        Args:
            
            name, str: name of the Namespace (required)
            
            body, V1beta1_Namespace:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/namespaces/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listNode(self, **kwargs):
        """list objects of kind Node
        Args:
            
        
        Returns: V1beta1_MinionList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_MinionList')
        return responseObject
        
    
    def createNode(self, **kwargs):
        """create a Node
        Args:
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readNode(self, **kwargs):
        """read the specified Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: V1beta1_Minion
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Minion')
        return responseObject
        
    
    def replaceNode(self, **kwargs):
        """replace the specified Node
        Args:
            
            name, str: name of the Node (required)
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteNode(self, **kwargs):
        """delete a Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchNode(self, **kwargs):
        """partially update the specified Node
        Args:
            
            name, str: name of the Node (required)
            
            body, V1beta1_Minion:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listPod(self, **kwargs):
        """list objects of kind Pod
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_PodList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_PodList')
        return responseObject
        
    
    def createPod(self, **kwargs):
        """create a Pod
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Pod:  (required)
            
        
        Returns: V1beta1_Pod
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Pod')
        return responseObject
        
    
    def readPod(self, **kwargs):
        """read the specified Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Pod
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Pod')
        return responseObject
        
    
    def replacePod(self, **kwargs):
        """replace the specified Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Pod:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replacePod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deletePod(self, **kwargs):
        """delete a Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deletePod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchPod(self, **kwargs):
        """partially update the specified Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Pod:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def createBinding(self, **kwargs):
        """create a Binding
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Binding:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createBinding" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}/binding'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def replacePod(self, **kwargs):
        """replace the specified Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Pod:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replacePod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/pods/{name}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETNode(self, **kwargs):
        """proxy GET requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTNode(self, **kwargs):
        """proxy PUT requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTNode(self, **kwargs):
        """proxy POST requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETENode(self, **kwargs):
        """proxy DELETE requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETENode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETNode(self, **kwargs):
        """proxy GET requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTNode(self, **kwargs):
        """proxy PUT requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTNode(self, **kwargs):
        """proxy POST requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETENode(self, **kwargs):
        """proxy DELETE requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETENode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/minions/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETNode(self, **kwargs):
        """proxy GET requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTNode(self, **kwargs):
        """proxy PUT requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTNode(self, **kwargs):
        """proxy POST requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETENode(self, **kwargs):
        """proxy DELETE requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETENode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETNode(self, **kwargs):
        """proxy GET requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTNode(self, **kwargs):
        """proxy PUT requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTNode(self, **kwargs):
        """proxy POST requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETENode(self, **kwargs):
        """proxy DELETE requests to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETENode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/nodes/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETPod(self, **kwargs):
        """proxy GET requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTPod(self, **kwargs):
        """proxy PUT requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTPod(self, **kwargs):
        """proxy POST requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETEPod(self, **kwargs):
        """proxy DELETE requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETEPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETPod(self, **kwargs):
        """proxy GET requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTPod(self, **kwargs):
        """proxy PUT requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTPod(self, **kwargs):
        """proxy POST requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETEPod(self, **kwargs):
        """proxy DELETE requests to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETEPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/pods/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETService(self, **kwargs):
        """proxy GET requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTService(self, **kwargs):
        """proxy PUT requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTService(self, **kwargs):
        """proxy POST requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETEService(self, **kwargs):
        """proxy DELETE requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETEService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyGETService(self, **kwargs):
        """proxy GET requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyGETService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPUTService(self, **kwargs):
        """proxy PUT requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPUTService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyPOSTService(self, **kwargs):
        """proxy POST requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyPOSTService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def proxyDELETEService(self, **kwargs):
        """proxy DELETE requests to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method proxyDELETEService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/proxy/services/{name}/{path:*}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def redirectNode(self, **kwargs):
        """redirect GET request to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method redirectNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/redirect/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def redirectNode(self, **kwargs):
        """redirect GET request to Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: void
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method redirectNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/redirect/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def redirectPod(self, **kwargs):
        """redirect GET request to Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method redirectPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/redirect/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def redirectService(self, **kwargs):
        """redirect GET request to Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method redirectService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/redirect/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = '*/*';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listReplicationController(self, **kwargs):
        """list objects of kind ReplicationController
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ReplicationControllerList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ReplicationControllerList')
        return responseObject
        
    
    def createReplicationController(self, **kwargs):
        """create a ReplicationController
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ReplicationController:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readReplicationController(self, **kwargs):
        """read the specified ReplicationController
        Args:
            
            name, str: name of the ReplicationController (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ReplicationController
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ReplicationController')
        return responseObject
        
    
    def replaceReplicationController(self, **kwargs):
        """replace the specified ReplicationController
        Args:
            
            name, str: name of the ReplicationController (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ReplicationController:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteReplicationController(self, **kwargs):
        """delete a ReplicationController
        Args:
            
            name, str: name of the ReplicationController (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchReplicationController(self, **kwargs):
        """partially update the specified ReplicationController
        Args:
            
            name, str: name of the ReplicationController (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ReplicationController:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/replicationControllers/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listResourceQuota(self, **kwargs):
        """list objects of kind ResourceQuota
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ResourceQuotaList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ResourceQuotaList')
        return responseObject
        
    
    def createResourceQuota(self, **kwargs):
        """create a ResourceQuota
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ResourceQuota:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readResourceQuota(self, **kwargs):
        """read the specified ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ResourceQuota
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ResourceQuota')
        return responseObject
        
    
    def replaceResourceQuota(self, **kwargs):
        """replace the specified ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ResourceQuota:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteResourceQuota(self, **kwargs):
        """delete a ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchResourceQuota(self, **kwargs):
        """partially update the specified ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ResourceQuota:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def replaceResourceQuota(self, **kwargs):
        """replace the specified ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_ResourceQuota:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/resourceQuotas/{name}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listSecret(self, **kwargs):
        """list objects of kind Secret
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_SecretList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_SecretList')
        return responseObject
        
    
    def createSecret(self, **kwargs):
        """create a Secret
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Secret:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readSecret(self, **kwargs):
        """read the specified Secret
        Args:
            
            name, str: name of the Secret (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Secret
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Secret')
        return responseObject
        
    
    def replaceSecret(self, **kwargs):
        """replace the specified Secret
        Args:
            
            name, str: name of the Secret (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Secret:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteSecret(self, **kwargs):
        """delete a Secret
        Args:
            
            name, str: name of the Secret (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchSecret(self, **kwargs):
        """partially update the specified Secret
        Args:
            
            name, str: name of the Secret (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Secret:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/secrets/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def listService(self, **kwargs):
        """list objects of kind Service
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ServiceList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method listService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ServiceList')
        return responseObject
        
    
    def createService(self, **kwargs):
        """create a Service
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Service:  (required)
            
        
        Returns: void
        """
        allParams = ['namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method createService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def readService(self, **kwargs):
        """read the specified Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Service
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method readService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Service')
        return responseObject
        
    
    def replaceService(self, **kwargs):
        """replace the specified Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Service:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method replaceService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def deleteService(self, **kwargs):
        """delete a Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method deleteService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def patchService(self, **kwargs):
        """partially update the specified Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
            body, V1beta1_Service:  (required)
            
        
        Returns: void
        """
        allParams = ['name', 'namespace', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method patchService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PATCH'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        
        if ('body' in params):
            bodyParam = params['body']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'void')
        return responseObject
        
    
    def watchEndpointslist(self, **kwargs):
        """watch a list of Endpoints
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_EndpointsList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchEndpointslist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/endpoints'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_EndpointsList')
        return responseObject
        
    
    def watchEndpoints(self, **kwargs):
        """watch a particular Endpoints
        Args:
            
            name, str: name of the Endpoints (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Endpoints
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchEndpoints" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/endpoints/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Endpoints')
        return responseObject
        
    
    def watchEventlist(self, **kwargs):
        """watch a list of Event
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_EventList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchEventlist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/events'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_EventList')
        return responseObject
        
    
    def watchEvent(self, **kwargs):
        """watch a particular Event
        Args:
            
            name, str: name of the Event (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Event
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchEvent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/events/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Event')
        return responseObject
        
    
    def watchLimitRangelist(self, **kwargs):
        """watch a list of LimitRange
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_LimitRangeList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchLimitRangelist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/limitRanges'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_LimitRangeList')
        return responseObject
        
    
    def watchLimitRange(self, **kwargs):
        """watch a particular LimitRange
        Args:
            
            name, str: name of the LimitRange (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_LimitRange
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchLimitRange" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/limitRanges/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_LimitRange')
        return responseObject
        
    
    def watchNodelist(self, **kwargs):
        """watch a list of Node
        Args:
            
        
        Returns: V1beta1_MinionList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNodelist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/minions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_MinionList')
        return responseObject
        
    
    def watchNode(self, **kwargs):
        """watch a particular Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: V1beta1_Minion
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/minions/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Minion')
        return responseObject
        
    
    def watchNamespacelist(self, **kwargs):
        """watch a list of Namespace
        Args:
            
        
        Returns: V1beta1_NamespaceList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNamespacelist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/namespaces'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_NamespaceList')
        return responseObject
        
    
    def watchNamespace(self, **kwargs):
        """watch a particular Namespace
        Args:
            
            name, str: name of the Namespace (required)
            
        
        Returns: V1beta1_Namespace
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNamespace" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/namespaces/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Namespace')
        return responseObject
        
    
    def watchNodelist(self, **kwargs):
        """watch a list of Node
        Args:
            
        
        Returns: V1beta1_MinionList
        """
        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNodelist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/nodes'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_MinionList')
        return responseObject
        
    
    def watchNode(self, **kwargs):
        """watch a particular Node
        Args:
            
            name, str: name of the Node (required)
            
        
        Returns: V1beta1_Minion
        """
        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchNode" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/nodes/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Minion')
        return responseObject
        
    
    def watchPodlist(self, **kwargs):
        """watch a list of Pod
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_PodList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchPodlist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/pods'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_PodList')
        return responseObject
        
    
    def watchPod(self, **kwargs):
        """watch a particular Pod
        Args:
            
            name, str: name of the Pod (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Pod
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchPod" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/pods/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Pod')
        return responseObject
        
    
    def watchReplicationControllerlist(self, **kwargs):
        """watch a list of ReplicationController
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ReplicationControllerList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchReplicationControllerlist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/replicationControllers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ReplicationControllerList')
        return responseObject
        
    
    def watchReplicationController(self, **kwargs):
        """watch a particular ReplicationController
        Args:
            
            name, str: name of the ReplicationController (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ReplicationController
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchReplicationController" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/replicationControllers/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ReplicationController')
        return responseObject
        
    
    def watchResourceQuotalist(self, **kwargs):
        """watch a list of ResourceQuota
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ResourceQuotaList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchResourceQuotalist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/resourceQuotas'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ResourceQuotaList')
        return responseObject
        
    
    def watchResourceQuota(self, **kwargs):
        """watch a particular ResourceQuota
        Args:
            
            name, str: name of the ResourceQuota (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ResourceQuota
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchResourceQuota" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/resourceQuotas/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ResourceQuota')
        return responseObject
        
    
    def watchSecretlist(self, **kwargs):
        """watch a list of Secret
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_SecretList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchSecretlist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/secrets'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_SecretList')
        return responseObject
        
    
    def watchSecret(self, **kwargs):
        """watch a particular Secret
        Args:
            
            name, str: name of the Secret (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Secret
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchSecret" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/secrets/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Secret')
        return responseObject
        
    
    def watchServicelist(self, **kwargs):
        """watch a list of Service
        Args:
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_ServiceList
        """
        allParams = ['namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchServicelist" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/services'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_ServiceList')
        return responseObject
        
    
    def watchService(self, **kwargs):
        """watch a particular Service
        Args:
            
            name, str: name of the Service (required)
            
            namespace, str: object name and auth scope, such as for teams and projects (required)
            
        
        Returns: V1beta1_Service
        """
        allParams = ['name', 'namespace']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s'"
                                " to method watchService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/api/v1/watch/services/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json';
        headerParams['Content-Type'] = '*/*';

        
        if ('namespace' in params):
            queryParams['namespace'] = self.apiClient.toPathValue(
                                           params['namespace'])
        

        

        
        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(
                              params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'V1beta1_Service')
        return responseObject
        
    

